name: Build Wheels and Release
on:
  push:
    tags:
      - 'v*'
      - 'buildwheels*'
env:
  CIBW_BUILD_VERBOSITY: 2
  CIBW_TEST_REQUIRES: "-r requirements/test.txt"
  CIBW_TEST_COMMAND: pytest --pyargs skimage


jobs:
  build_macos_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Build wheels for CPython 3.9 and Mac OS
        run: |
          brew install libomp
          python -m cibuildwheel --output-dir dist
        env:
          CIBW_BUILD: "cp39-*"
          CIBW_MANYLINUX_X86_64_IMAGE: manylinux1
          CIBW_MANYLINUX_I686_IMAGE: manylinux1
          # CIBW_BEFORE_BUILD: pip install certifi numpy==1.19.3
          CC: /usr/bin/clang
          CXX: /usr/bin/clang++
          CPPFLAGS: "-Xpreprocessor -fopenmp"
          CFLAGS: "-Wno-implicit-function-declaration -I/usr/local/opt/libomp/include"
          CXXFLAGS: "-I/usr/local/opt/libomp/include"
          LDFLAGS: "-Wl,-rpath,/usr/local/opt/libomp/lib -L/usr/local/opt/libomp/lib -lomp"

      - uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: ./dist/*.whl

  deploy:
    name: Release
    needs: [build_macos_wheels]
    if: github.repository_owner == 'viniciusdc' && startsWith(github.ref, 'refs/tags/v') && always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v2
        name: Install Python
        with:
          python-version: '3.7'
      
      - name: Set release version number
        run: |
          echo "RELEASE_VERSION=$( git describe --tags --abbrev=0 | sed 's/v//')" >> $GITHUB_ENV
      
      - name: Install Twine
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/build.txt
          pip install twine
      
      - uses: actions/download-artifact@v2
        id: download
        with:
          name: wheels
          path: ./dist
    
      - name: Publish the source distribution on PyPI
        run: |
          python setup.py sdist
          ls -la ${{ github.workspace }}/dist 
          twine upload ${{ github.workspace }}/dist/scikit-image-testreleasenote-${RELEASE_VERSION}.tar.gz
          cd ${{ github.workspace }}/dist
          twine upload *.whl
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
      
      ### Generate Release Notes and Release on Github
      
      - name: Install release notes deps
        run: |
          pip install -r requirements/_release_tools.txt

      - name: Generate draft notes
        run: |
          towncrier --draft --version=${RELEASE_VERSION}
      
      - name: Get reviewers and authors
        run: |
          python tools/aggregate_contributors.py ${{ github.workspace }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release Notes
        run: |
          towncrier build --yes --version=${RELEASE_VERSION}

      - name: Merge and preview release notes
        run: |
          cat "reviewers_and_authors.txt" >> doc/release/release_${RELEASE_VERSION}.rst
          cp doc/release/release_${RELEASE_VERSION}.rst /tmp/release_notes.rst
          cat /tmp/release_notes.rst
      
      - name: Generate artifact
        uses: actions/upload-artifact@v2
        with:
          name: notes
          path: ./doc/release/*.rst

      - name: Github release
        uses: softprops/action-gh-release@v1
        with:
          files: /tmp/release_notes.rst
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
      
      - name: Push Changes
        run: |   
          # See https://github.community/t/github-actions-bot-email-address/17204/5
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions"

          # Commit newsfragments deletion and the new release notes
          git commit -m "${COMMIT_MSG}"
          git push origin "main"
        env:
          COMMIT_MSG: |
            Auto release automated commit: ${{ github.sha }}
